# -*- coding: utf-8 -*-
"""
Created on Thu Jul 11 14:35:18 2019

@author: admin
"""


class Solution:
    def uniquePathsWithObstacles(self, Grid):
        # obstacleGrid: List[List[int]
        # return int
        
        self.row, self.col = len(Grid), len(Grid[0])
        
        if self.row == 1 and self.col == 1:
            return int(Grid[0][0] == 0)
        
        if Grid[self.row - 1][self.col - 1] == 1:
            return 0
        
        if Grid[0][0] == 1:
            return 0
        
        # 建立pos用来存储每个grid到达终点的可能路径数目
        pos = []
        for i in range(self.row):
            pos.append([0] * self.col)
            
        # 终点自身的路径为1
        pos[self.row - 1][self.col - 1] = 1
        
        # frontier用来存储本轮需要探索的grid
        # 能够进入frontier的idx有两个条件，一个是没超越边界，一个grid在该idx上不为1
        frontier = []
        if self.row - 2 >= 0 and Grid[self.row - 2][self.col - 1] != 1:
            frontier.append((self.row - 2, self.col - 1))
        if self.col - 2 >= 0 and Grid[self.row - 1][self.col - 2] != 1:
            frontier.append((self.row - 1, self.col - 2))
            
        while len(frontier) != 0:
            f_next = set()
            for f in frontier:
                i, j = f
                # 更新idx的可能路径数
                if i + 1 <= self.row - 1:
                    pos[i][j] += pos[i + 1][j]
                if j + 1 <= self.col - 1:
                    pos[i][j] += pos[i][j + 1]
                # 产生下一轮的frontier
                if i - 1 >= 0 and Grid[i - 1][j] != 1:
                    f_next.add((i - 1, j))
                if j - 1 >= 0 and Grid[i][j - 1] != 1:
                    f_next.add((i, j - 1))
            frontier = f_next
        
        return pos[0][0]
                    
                

cl = Solution()
grid =[[0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1],[0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0],[0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0],[1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0],[0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0],[0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1],[1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1],[0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1],[1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1],[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0]]

res = cl.uniquePathsWithObstacles(grid)
                
                
                
                
                
            
        
        